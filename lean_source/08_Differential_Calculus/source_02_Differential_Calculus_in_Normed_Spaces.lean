import analysis.normed_space.banach_steinhaus
import analysis.normed_space.finite_dimension

import analysis.calculus.inverse

open set filter
open_locale topological_space filter

noncomputable theory

/- TEXT:
.. index:: normed space

.. _normed_spaces:

Differential Calculus in Normed Spaces
--------------------------------------

Normed spaces
^^^^^^^^^^^^^

Differentiation can be generalized beyond ``‚Ñù`` using the notion of a
*normed vector space*, which encapsulates both direction and distance.
We start with the notion of a *normed group*, which as an additive commutative
group equipped with a real-valued norm function
satisfying the following conditions.
EXAMPLES: -/
section
-- QUOTE:
variables {E : Type*} [normed_group E]

example (x : E) : 0 ‚â§ ‚à•x‚à• :=
norm_nonneg x

example {x : E} : ‚à•x‚à• = 0 ‚Üî x = 0 :=
norm_eq_zero

example (x y : E) : ‚à•x + y‚à• ‚â§ ‚à•x‚à• + ‚à•y‚à• :=
norm_add_le x y
-- QUOTE.

/- TEXT:
Every normed space is a metric space with distance function
:math:`d(x, y) = \| x - y \|`, and hence it is also a topological space.
Lean and mathlib know this.
EXAMPLES: -/
-- QUOTE:
example : metric_space E := by apply_instance

example {X : Type*} [topological_space X] {f : X ‚Üí E} (hf : continuous f) :
  continuous (Œª x, ‚à•f x‚à•) :=
hf.norm
-- QUOTE.

/- TEXT:
In order to use the notion of a norm with concepts from linear algebra,
we add the assumption ``normed_space ‚Ñù E`` on top of ``normed_group E``.
This stipulates that ``E`` is a vector space over ``‚Ñù`` and that
scalar multiplication satisfies the following condition.
EXAMPLES: -/
-- QUOTE:
variables [normed_space ‚Ñù E]

example (a : ‚Ñù) (x : E) : ‚à•a ‚Ä¢ x‚à• = |a| * ‚à•x‚à• :=
norm_smul a x
-- QUOTE.

/- TEXT:
A complete normed space is known as a *Banach space*.
Every finite-dimensional vector space is complete.
EXAMPLES: -/
-- QUOTE:
example [finite_dimensional ‚Ñù E] : complete_space E :=
by apply_instance
-- QUOTE.

/- TEXT:
In all the previous examples, we used the real numbers as the base field.
More generally, we can make sense of calculus with a vector space over any
*non-discrete normed field*. These are fields that are equipped with a
real-valued norm that is multiplicative and has the property that
not every element has norm zero or one
(equivalently, there is an element whose norm is bigger than one).
EXAMPLES: -/
-- QUOTE:
example (ùïú : Type*) [nondiscrete_normed_field ùïú] (x y : ùïú) : ‚à•x * y‚à• = ‚à•x‚à• * ‚à•y‚à• :=
norm_mul x y

example (ùïú : Type*) [nondiscrete_normed_field ùïú] : ‚àÉ x : ùïú, 1 < ‚à•x‚à• :=
normed_field.exists_one_lt_norm ùïú
-- QUOTE.

/- TEXT:
A finite-dimensional vector space over a nondiscrete normed field is
complete as long as the field itself is complete.
EXAMPLES: -/
-- QUOTE:
example (ùïú : Type*) [nondiscrete_normed_field ùïú] (E : Type*) [normed_group E]
  [normed_space ùïú E] [complete_space ùïú] [finite_dimensional ùïú E] : complete_space E :=
finite_dimensional.complete ùïú E
-- QUOTE.

end

/- TEXT:
Continuous linear maps
^^^^^^^^^^^^^^^^^^^^^^

We now turn to the morphisms in the category of normed spaces, namely,
continuous linear maps.
In mathlib, the type of ``ùïú``-linear continuous maps between normed spaces
``E`` and ``F`` is written ``E ‚ÜíL[ùïú] F``.
They are implemented as *bundled maps*, which means that an element of this type
a structure that that includes the function itself and the properties
of being linear and continuous.
Lean will insert a coercion so that a continuous linear map can be treated
as a function.
EXAMPLES: -/
section
-- QUOTE:
variables {ùïú : Type*} [nondiscrete_normed_field ùïú]
          {E : Type*} [normed_group E] [normed_space ùïú E]
          {F : Type*} [normed_group F] [normed_space ùïú F]

example : E ‚ÜíL[ùïú] E := continuous_linear_map.id ùïú E

example (f : E ‚ÜíL[ùïú] F) : E ‚Üí F :=
f

example (f : E ‚ÜíL[ùïú] F) : continuous f :=
f.cont

example (f : E ‚ÜíL[ùïú] F) (x y : E) : f (x + y) = f x + f y :=
f.map_add x y

example (f : E ‚ÜíL[ùïú] F) (a : ùïú) (x : E) : f (a ‚Ä¢ x) = a ‚Ä¢ f x :=
f.map_smul a x
-- QUOTE.

/- TEXT:
Continuous linear maps have an operator norm that is characterized by the
following properties.
EXAMPLES: -/
-- QUOTE:
variables (f : E ‚ÜíL[ùïú] F)

example (x : E) : ‚à•f x‚à• ‚â§ ‚à•f‚à• * ‚à•x‚à• :=
f.le_op_norm x

example {M : ‚Ñù} (hMp: 0 ‚â§ M) (hM : ‚àÄ x, ‚à•f x‚à• ‚â§ M * ‚à•x‚à•) :
  ‚à•f‚à• ‚â§ M :=
f.op_norm_le_bound hMp hM
-- QUOTE.

end

/- TEXT:
There is also a notion of bundled continuous linear *isomorphism*.
Their type of such isomorphisms is ``E ‚âÉL[ùïú] F``.

As a challenging exercise, you can prove the Banach-Steinhaus theorem, also
known as the Uniform Boundedness Principle.
The principle states that a family of continuous linear maps from a Banach space
into a normed space is pointwise
bounded, then the norms of these linear maps are uniformly bounded.
The main ingredient is Baire's theorem
``nonempty_interior_of_Union_of_closed.`` (You proved a version of this in the topology chapter.)
Minor ingredients include ``continuous_linear_map.op_norm_le_of_shell``,
``interior_subset`` and ``interior_Inter_subset`` and ``is_closed_le``.
BOTH: -/
section
-- QUOTE:
variables
  {ùïú : Type*} [nondiscrete_normed_field ùïú]
  {E : Type*} [normed_group E] [normed_space ùïú E]
  {F : Type*} [normed_group F] [normed_space ùïú F]

open metric

-- EXAMPLES:
example {Œπ : Type*} [complete_space E] {g : Œπ ‚Üí E ‚ÜíL[ùïú] F}
  (h : ‚àÄ x, ‚àÉ C, ‚àÄ i, ‚à•g i x‚à• ‚â§ C) :
  ‚àÉ C', ‚àÄ i, ‚à•g i‚à• ‚â§ C' :=
begin
  /- sequence of subsets consisting of those `x : E` with norms `‚à•g i x‚à•` bounded by `n` -/
  let e : ‚Ñï ‚Üí set E := Œª n, ‚ãÇ i : Œπ, { x : E | ‚à•g i x‚à• ‚â§ n },
  /- each of these sets is closed -/
  have hc : ‚àÄ n : ‚Ñï, is_closed (e n),
  sorry,
  /- the union is the entire space; this is where we use `h` -/
  have hU : (‚ãÉ n : ‚Ñï, e n) = univ,
  sorry,
  /- apply the Baire category theorem to conclude that for some `m : ‚Ñï`,
     `e m` contains some `x` -/
  obtain ‚ü®m, x, hx‚ü© : ‚àÉ m, ‚àÉ x, x ‚àà interior (e m) := sorry,
  obtain ‚ü®Œµ, Œµ_pos, hŒµ‚ü© : ‚àÉ Œµ > 0, ball x Œµ ‚äÜ interior (e m) := sorry,
  obtain ‚ü®k, hk‚ü© : ‚àÉ k : ùïú, 1 < ‚à•k‚à• := sorry,
  /- show all elements in the ball have norm bounded by `m` after applying any `g i` -/
  have real_norm_le : ‚àÄ (z ‚àà ball x Œµ) (i : Œπ), ‚à•g i z‚à• ‚â§ m,
  sorry,
  have Œµk_pos : 0 < Œµ / ‚à•k‚à• := sorry,
  refine ‚ü®(m + m : ‚Ñï) / (Œµ / ‚à•k‚à•),
           Œª i, continuous_linear_map.op_norm_le_of_shell Œµ_pos _ hk _‚ü©,
  sorry,
  sorry
end
-- QUOTE.

-- SOLUTIONS:
example {Œπ : Type*} [complete_space E] {g : Œπ ‚Üí E ‚ÜíL[ùïú] F}
  (h : ‚àÄ x, ‚àÉ C, ‚àÄ i, ‚à•g i x‚à• ‚â§ C) :
  ‚àÉ C', ‚àÄ i, ‚à•g i‚à• ‚â§ C' :=
begin
  /- sequence of subsets consisting of those `x : E` with norms `‚à•g i x‚à•` bounded by `n` -/
  let e : ‚Ñï ‚Üí set E := Œª n, ‚ãÇ i : Œπ, { x : E | ‚à•g i x‚à• ‚â§ n },
  /- each of these sets is closed -/
  have hc : ‚àÄ n : ‚Ñï, is_closed (e n),
  from Œª i, is_closed_Inter (Œª i, is_closed_le (g i).cont.norm continuous_const),
  /- the union is the entire space; this is where we use `h` -/
  have hU : (‚ãÉ n : ‚Ñï, e n) = univ,
  { refine eq_univ_of_forall (Œª x, _),
    cases h x with C hC,
    obtain ‚ü®m, hm‚ü© := exists_nat_ge C,
    exact ‚ü®e m, mem_range_self m, mem_Inter.mpr (Œª i, le_trans (hC i) hm)‚ü© },
  /- apply the Baire category theorem to conclude that for some `m : ‚Ñï`,
     `e m` contains some `x` -/
  obtain ‚ü®m : ‚Ñï, x : E, hx : x ‚àà interior (e m)‚ü© := nonempty_interior_of_Union_of_closed hc hU,
  obtain ‚ü®Œµ, Œµ_pos, hŒµ : ball x Œµ ‚äÜ interior (e m)‚ü© := is_open_iff.mp is_open_interior x hx,
  obtain ‚ü®k : ùïú, hk : 1 < ‚à•k‚à•‚ü© := normed_field.exists_one_lt_norm ùïú,
  /- show all elements in the ball have norm bounded by `m` after applying any `g i` -/
  have real_norm_le : ‚àÄ (z ‚àà ball x Œµ) (i : Œπ), ‚à•g i z‚à• ‚â§ m,
  { intros z hz i,
    replace hz := mem_Inter.mp (interior_Inter_subset _ (hŒµ hz)) i,
    apply interior_subset hz },
  have Œµk_pos : 0 < Œµ / ‚à•k‚à• := div_pos Œµ_pos (zero_lt_one.trans hk),
  refine ‚ü®(m + m : ‚Ñï) / (Œµ / ‚à•k‚à•), Œª i, continuous_linear_map.op_norm_le_of_shell Œµ_pos _ hk _‚ü©,
  { exact div_nonneg (nat.cast_nonneg _) Œµk_pos.le },
  intros y le_y y_lt,
  calc ‚à•g i y‚à•
      = ‚à•g i (y + x) - g i x‚à•   : by rw [(g i).map_add, add_sub_cancel]
  ... ‚â§ ‚à•g i (y + x)‚à• + ‚à•g i x‚à• : norm_sub_le _ _
  ... ‚â§ m + m : add_le_add (real_norm_le (y + x) (by rwa [add_comm, add_mem_ball_iff_norm]) i)
          (real_norm_le x (mem_ball_self Œµ_pos) i)
  ... = (m + m : ‚Ñï) : by norm_cast
  ... ‚â§ (m + m : ‚Ñï) * (‚à•y‚à• / (Œµ / ‚à•k‚à•))
      : le_mul_of_one_le_right (nat.cast_nonneg _)
          ((one_le_div $ div_pos Œµ_pos (zero_lt_one.trans hk)).2 le_y)
  ... = (m + m : ‚Ñï) / (Œµ / ‚à•k‚à•) * ‚à•y‚à• : (mul_comm_div _ _ _).symm,
end

-- BOTH:
end

/- TEXT:
Asymptotic comparisons
^^^^^^^^^^^^^^^^^^^^^^

Defining differentiability also requires asymptotic comparisons.
Mathlib has an extensive library covering the big O and little o relations,
whose definitions are shown below.
Opening the ``asymptotics`` locale allows us to use the corresponding
notation.
Here we will only use little o to define differentiability.
EXAMPLES: -/
-- QUOTE:
open asymptotics
open_locale asymptotics

example {Œ± : Type*} {E : Type*} [normed_group E] {F : Type*} [normed_group F]
  (c : ‚Ñù) (l : filter Œ±) (f : Œ± ‚Üí E) (g : Œ± ‚Üí F) :
  is_O_with c l f g ‚Üî ‚àÄ·∂† x in l, ‚à• f x ‚à• ‚â§ c * ‚à• g x ‚à• :=
is_O_with_iff

example {Œ± : Type*} {E : Type*} [normed_group E] {F : Type*} [normed_group F]
  (c : ‚Ñù) (l : filter Œ±) (f : Œ± ‚Üí E) (g : Œ± ‚Üí F) :
  f =O[l] g ‚Üî ‚àÉ C, is_O_with C l f g :=
is_O_iff_is_O_with

example {Œ± : Type*} {E : Type*} [normed_group E] {F : Type*} [normed_group F]
  (c : ‚Ñù) (l : filter Œ±) (f : Œ± ‚Üí E) (g : Œ± ‚Üí F) :
  f =o[l] g ‚Üî ‚àÄ C > 0, is_O_with C l f g :=
is_o_iff_forall_is_O_with

example {Œ± : Type*} {E : Type*} [normed_group E] (c : ‚Ñù) (l : filter Œ±) (f g : Œ± ‚Üí E) :
  f ~[l] g ‚Üî (f - g) =o[l] g :=
iff.rfl
-- QUOTE.

/- TEXT:
Differentiability
^^^^^^^^^^^^^^^^^

We are now ready to discuss differentiable functions between normed spaces.
In analogy the elementary one-dimensional,
mathlib defines a predicate ``has_fderiv_at`` and a function ``fderiv``.
Here the letter
"f" stands for *Fr√©chet*.
EXAMPLES: -/
section
-- QUOTE:
variables
  {ùïú : Type*} [nondiscrete_normed_field ùïú]
  {E : Type*} [normed_group E] [normed_space ùïú E]
  {F : Type*} [normed_group F] [normed_space ùïú F]

example (f : E ‚Üí F) (f' : E ‚ÜíL[ùïú] F) (x‚ÇÄ : E) :
  has_fderiv_at f f' x‚ÇÄ ‚Üî (Œª x, f x - f x‚ÇÄ - f' (x - x‚ÇÄ)) =o[ùìù x‚ÇÄ] (Œª x, x - x‚ÇÄ) :=
iff.rfl

example (f : E ‚Üí F) (f' : E ‚ÜíL[ùïú] F) (x‚ÇÄ : E) (hff' : has_fderiv_at f f' x‚ÇÄ) :
  fderiv ùïú f x‚ÇÄ = f' :=
hff'.fderiv
-- QUOTE.

/- TEXT:
We also have iterated derivatives that take values in the type of multilinear maps
``E [√ón]‚ÜíL[ùïú] F``,
and we have continuously differential functions.
The type ``with_top ‚Ñï`` is ``‚Ñï`` with an additional element ``‚ä§`` that
is bigger than every natural number.
So :math:`\mathcal{C}^\infty` functions are functions ``f`` that satisfy
``cont_diff ùïú ‚ä§ f``.
EXAMPLES: -/
-- QUOTE:
example (n : ‚Ñï) (f : E ‚Üí F) : E ‚Üí (E [√ón]‚ÜíL[ùïú] F) :=
iterated_fderiv ùïú n f

example (n : with_top ‚Ñï) {f : E ‚Üí F} :
  cont_diff ùïú n f ‚Üî
    (‚àÄ (m : ‚Ñï), (m : with_top ‚Ñï) ‚â§ n ‚Üí continuous (Œª x, iterated_fderiv ùïú m f x))
  ‚àß (‚àÄ (m : ‚Ñï), (m : with_top ‚Ñï) < n ‚Üí differentiable ùïú (Œª x, iterated_fderiv ùïú m f x)) :=
cont_diff_iff_continuous_differentiable
-- QUOTE.

/- TEXT:
There is a stricter notion of differentiability called
``has_strict_fderiv_at``, which is used in the statement
of the inverse function theorem and the statement of the implicit function
theorem, both of which are in mathlib.
Over ``‚Ñù`` or ``‚ÑÇ``, continuously differentiable
functions are strictly differentiable.
EXAMPLES: -/
-- QUOTE:
example {ùïÇ : Type*} [is_R_or_C ùïÇ] {E : Type*} [normed_group E] [normed_space ùïÇ E]
  {F : Type*} [normed_group F] [normed_space ùïÇ F]
  {f : E ‚Üí F} {x : E} {n : with_top ‚Ñï}
  (hf : cont_diff_at ùïÇ n f x) (hn : 1 ‚â§ n) :
  has_strict_fderiv_at f (fderiv ùïÇ f x) x :=
hf.has_strict_fderiv_at hn
-- QUOTE.

/- TEXT:
The local inverse theorem is stated using an operation that produces an
inverse function from a
function and the assumptions that the function is strictly differentiable at a
point ``a`` and that its derivative is an isomorphism.

The first example below gets this local inverse.
The next one states that it is indeed a local inverse
from the left and from the right, and that it is strictly differentiable.
EXAMPLES: -/
-- QUOTE:
section local_inverse
variables [complete_space E] {f : E ‚Üí F} {f' : E ‚âÉL[ùïú] F} {a : E}

example (hf : has_strict_fderiv_at f ‚Üëf' a) : F ‚Üí E :=
has_strict_fderiv_at.local_inverse f f' a hf

example  (hf : has_strict_fderiv_at f (f' : E ‚ÜíL[ùïú] F) a) :
  ‚àÄ·∂† x in ùìù a, hf.local_inverse f f' a (f x) = x :=
hf.eventually_left_inverse

example  (hf : has_strict_fderiv_at f (f' : E ‚ÜíL[ùïú] F) a) :
  ‚àÄ·∂† x in ùìù (f a), f (hf.local_inverse f f' a x) = x :=
hf.eventually_right_inverse

example [complete_space E] {f : E ‚Üí F} {f' : E ‚âÉL[ùïú] F} {a : E}
    (hf : has_strict_fderiv_at f ‚Üëf' a) :
  has_strict_fderiv_at (has_strict_fderiv_at.local_inverse f f' a hf)
    (f'.symm : F ‚ÜíL[ùïú] E) (f a) :=
has_strict_fderiv_at.to_local_inverse hf

end local_inverse
-- QUOTE.

/- TEXT:
This has been only a quick tour of the differential calculus in mathlib.
The library contains many variations that we have not discussed.
For example, you may want to use one-sided derivatives in the
one-dimensional setting. The means to do so are found in mathlib in a more
general context;
see ``has_fderiv_within_at`` or the even more general ``has_fderiv_at_filter``.
EXAMPLES: -/
#check has_fderiv_within_at
#check has_fderiv_at_filter

end